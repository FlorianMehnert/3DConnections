#pragma kernel CSMain

struct Node
{
    float2 position;
    float2 velocity;
};

RWStructuredBuffer<Node> nodes;

int node_count;
float delta_time;
float repulsion_strength;
float attraction_strength;
int steps_per_dispatch; // Number of simulation steps to perform

// Single simulation step
void SimulateStep(uint id)
{
    if (id >= node_count) return;

    Node self = nodes[id];
    float2 force = float2(0, 0);

    for (uint i = 0; i < node_count; i++)
    {
        if (i == id) continue;

        Node other = nodes[i];
        float2 direction = self.position - other.position;
        float distance = length(direction) + 0.001; // avoid div by zero
        float2 dirNorm = normalize(direction);

        // Repulsion force (inverse square law)
        force += dirNorm * (repulsion_strength / (distance * distance));

        // Simple spring attraction to center (gravity toward origin)
        force += -self.position * attraction_strength;
    }

    // Integrate velocity and position
    self.velocity += force * delta_time;
    self.position += self.velocity * delta_time;
    
    // Apply some damping to prevent indefinite oscillation
    self.velocity *= 0.99;

    nodes[id] = self;
}

[numthreads(64, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
    // Perform multiple simulation steps
    for (int step = 0; step < steps_per_dispatch; step++)
    {
        // Use barrier to ensure all threads have finished the previous step
        // before proceeding to the next one
        GroupMemoryBarrierWithGroupSync();
        
        SimulateStep(id);
    }
}