#pragma kernel spring_forces
#pragma kernel collision_response
#pragma kernel integrate_forces
#pragma kernel calculate_force_arrows

struct node_data
{
    float2 position;
    float2 previous_position; // Added to store previous position
    float2 velocity;
    float2 force;
    int node_type;
    int parent_id; // ID of the parent GameObject for components, -1 for GameObjects
};

struct arrow_data
{
    float2 start;
    float2 end;
    float strength;
};

struct NodeConnection
{
    int2 nodeIndex;
    int connectionType;
    int hierarchy;
};

RWStructuredBuffer<NodeData> nodes;
RWStructuredBuffer<NodeConnection> connections;
uint nodeCount;
float deltaTime;
float stiffness; // multiplier for the direction vector
RWStructuredBuffer<node_data> nodes;
RWStructuredBuffer<arrow_data> force_arrows;
uint node_count;
float delta_time;
float stiffness;
float damping;
float eConstant;
float collider_radius;
float collision_response_strength;
float min_integration_timestep;

// Relaxation parameters
float relaxation_factor; // Will be < 1 during relaxation and 1 when fully relaxed
float max_velocity_limit; // Will increase over time during relaxation

float go_rest_length;
float gc_rest_length;
float cc_rest_length;

// Radial layout parameters
float radial_distance; // Base distance for components around parent
float radial_angle_offset; // Starting angle offset (in radians)
float angle_separation; // Minimum separation between components (in radians)

[numthreads(64,1,1)]
void SpringForces(uint3 id : SV_DispatchThreadID)
void spring_forces (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= nodeCount) return;

    // Calculate spring forces
    float2 targetPosition = float2(0, 0);
    float2 displacement = targetPosition - nodes[id.x].position;
    float2 springForce = stiffness * displacement;
    float2 dampingForce = -damping * nodes[id.x].velocity;

    nodes[id.x].force = springForce + dampingForce;
    if (id.x >= node_count) return;

    // nodes[id.x].force = float2(0, 0);

    bool is_component = (nodes[id.x].node_type == 1);
    bool is_game_object = (nodes[id.x].node_type == 0);

    // Component Clustering around its parent GameObject
    if (is_component && nodes[id.x].parent_id >= 0)
    {
        float2 parent_pos = nodes[nodes[id.x].parent_id].position;

        // Find sibling index and count
        int sibling_count = 0;
        int component_index = 0;
        for (uint j = 0; j < node_count; j++)
        {
            if (nodes[j].node_type == 1 && nodes[j].parent_id == nodes[id.x].parent_id)
            {
                if (j < id.x) component_index++;
                sibling_count++;
            }
        }

        // Arrange in a local sphere (circle in 2D)
        float angle_step = max(2.0 * 3.14159265 / sibling_count, 0.5);
        float angle = component_index * angle_step;
        float2 target_pos = parent_pos + float2(cos(angle), sin(angle)) * 1.5;  // Close clustering
        float2 to_target = target_pos - nodes[id.x].position;

        nodes[id.x].force += normalize(to_target) * length(to_target) * stiffness * 5.0; // Strong clustering force
    }

    // Spring forces and GameObject-Component bonds
    for (uint j = 0; j < node_count; j++)
    {
        if (id.x == j) continue;

        float2 displacement = nodes[j].position - nodes[id.x].position;
        float distance = length(displacement);
        if (distance < 0.0001f) continue;

        float2 direction = displacement / distance;
        float rest_length = 1.5; // Base spacing
        float node_stiffness = stiffness;

        bool is_parent_child = (is_component && nodes[j].node_type == 0 && nodes[id.x].parent_id == j);

        if (is_parent_child) {
            rest_length = 1.2;
            node_stiffness = stiffness * 8.0; // Strong parent-child attraction
        }
        else if (is_game_object && nodes[j].node_type == 0) {
            rest_length = 5.0; // Separate GameObjects far apart
            node_stiffness = stiffness * 0.1;
        }
        else if (is_component && nodes[j].node_type == 1 && nodes[id.x].parent_id == nodes[j].parent_id) {
            rest_length = 1.5;
            node_stiffness = stiffness * 2.0; // Keep sibling components close
        }

        // Spring force calculation
        float spring_magnitude = node_stiffness * (distance - rest_length);
        nodes[id.x].force += direction * spring_magnitude;
    }

    // Repel GameObject Clusters from Each Other
    if (is_game_object)
    {
        for (uint j = 0; j < node_count; j++)
        {
            if (id.x == j || nodes[j].node_type != 0) continue;

            float2 go_displacement = nodes[j].position - nodes[id.x].position;
            float go_distance = length(go_displacement);
            if (go_distance < 0.0001f) continue;

            float2 go_direction = go_displacement / go_distance;
            float go_repulsion = stiffness * 15.0 / (go_distance * go_distance); // Strong repulsion
            nodes[id.x].force -= go_direction * go_repulsion;
        }
    }

    // Apply damping
    float2 damping_force = -damping * nodes[id.x].velocity;
    nodes[id.x].force += damping_force;
}

float StiffnessByConnectionType(int connectionType)
{
    switch (0)
    {
    case 0: return stiffness; // parent-child
    case 1: return stiffness * 10; // component 
    case 2: return stiffness * 5; // other references
    default: return stiffness;
    }
}

// Calculate spring forces based on connection types
[numthreads(64,1,1)]
void SpringForcesConnectionBased(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= pow(nodeCount, 2)) return;
    int2 node_index = connections[id.x].nodeIndex;
    int connection_type = connections[id.x].connectionType;
    int hierarchy = connections[id.x].hierarchy;

    // Log function from 1 to 0 to reduce influence for children
    float hierarchy_derived_stiffness = pow(eConstant, -log(hierarchy));
    float2 displacement = nodes[node_index.y].position - nodes[node_index.x].position;
    float2 spring_force = StiffnessByConnectionType(connection_type) * displacement * hierarchy_derived_stiffness;
    float2 damping_force = -damping * nodes[id.x].velocity;
    nodes[id.x].force = spring_force + damping_force;
}

[numthreads(64,1,1)]
void collision_response (uint3 id : SV_DispatchThreadID)
void CollisionResponse(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= node_count) return;
    
    if (id.x >= nodeCount) return;

    float2 position = nodes[id.x].position;
    float2 velocity = nodes[id.x].velocity;
    
    for (int j = 0; (uint)j < node_count; j++)

    for (int j = 0; (uint)j < nodeCount; j++)
    {
        if (id.x == (uint)j) continue;
        
        // Skip collision between component and its parent GameObject
        if ((nodes[id.x].node_type == 1 && nodes[j].node_type == 0 && nodes[id.x].parent_id == j) ||
            (nodes[id.x].node_type == 0 && nodes[j].node_type == 1 && nodes[j].parent_id == id.x)) {
            continue;
        }
        

        float2 delta = position - nodes[j].position;
        float distance = length(delta);
        float min_dist = collider_radius * 2;
        
        // Reduce minimum distance for components that share the same parent
        if (nodes[id.x].node_type == 1 && nodes[j].node_type == 1 && 
            nodes[id.x].parent_id == nodes[j].parent_id && nodes[id.x].parent_id >= 0) {
            min_dist *= 0.75; // Allow sibling components to get closer
        }
        
        if (distance < min_dist && distance > 0.0001f)
        float minDist = colliderRadius * 2;

        if (distance < minDist && distance > 0.0001f)
        {
            float2 direction = delta / distance;
            float overlap = min_dist - distance;
            
            // Increase positional correction during relaxation
            float correction_strength = 0.5f * relaxation_factor + 0.5f;
            position += direction * (overlap * correction_strength);
            
            float2 relative_velocity = velocity - nodes[j].velocity;
            float velocity_along_normal = dot(relative_velocity, direction);
            
            if (velocity_along_normal < 0)
            {
                // Adjust restitution based on relaxation
                float restitution = 0.5f * relaxation_factor;
                float j_scalar = -(1 + restitution) * velocity_along_normal;
                j_scalar *= collision_response_strength * relaxation_factor;
                
                velocity += direction * j_scalar;
            }
        }
    }

    nodes[id.x].position = position;
    nodes[id.x].velocity = velocity;

    // For GameObjects, add a mild rotational stabilization for their components
    if (nodes[id.x].node_type == 0) {
        // Find all components belonging to this GameObject
        float2 avg_component_pos = float2(0, 0);
        int component_count = 0;
        
        for (uint j = 0; j < node_count; j++) {
            if (nodes[j].node_type == 1 && nodes[j].parent_id == id.x) {
                avg_component_pos += nodes[j].position;
                component_count++;
            }
        }
        
        if (component_count > 0) {
            avg_component_pos /= component_count;
            float2 to_avg_component_dir = avg_component_pos - position;
            
            // Add a very weak force to balance components around parent
            if (length(to_avg_component_dir) > 0.1) {
                velocity -= normalize(to_avg_component_dir) * 0.001 * relaxation_factor;
            }
        }
    }

    if (node_count > 1) {
        // Calculate center of mass
        float2 center_of_mass = float2(0, 0);
        for (uint j = 0; j < node_count; j++) {
            center_of_mass += nodes[j].position;
        }
        center_of_mass /= node_count;
        
        // Calculate radial vector
        float2 radial_vector = nodes[id.x].position - center_of_mass;
        float distance = length(radial_vector);
        
        if (distance > 0.001) {
            // Calculate tangential velocity component
            float2 direction = radial_vector / distance;
            float2 tangent = float2(-direction.y, direction.x);
            float tangential_velocity = dot(nodes[id.x].velocity, tangent);
            
            // Increase angular damping during relaxation
            float angular_damping = 0.05 * (2.0 - relaxation_factor);
            nodes[id.x].velocity -= tangent * tangential_velocity * angular_damping;
        }
    }
}

[numthreads(64,1,1)]
void integrate_forces (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= node_count) return;
    
    // Store previous position before updating
    nodes[id.x].previous_position = nodes[id.x].position;
    
    // Use a smaller effective timestep for stability
    float effective_delta_time = min(delta_time, min_integration_timestep);
    
    // Semi-implicit Euler integration
    nodes[id.x].velocity += nodes[id.x].force * effective_delta_time;
    
    // Apply extra damping during relaxation
    float extra_damping = 0.99 * relaxation_factor + 0.9 * (1.0 - relaxation_factor);
    nodes[id.x].velocity *= extra_damping;
    
    // Apply velocity limit - more strict during relaxation
    float current_speed = length(nodes[id.x].velocity);
    if (current_speed > max_velocity_limit) {
        nodes[id.x].velocity = nodes[id.x].velocity / current_speed * max_velocity_limit;
    }
    
    nodes[id.x].position += nodes[id.x].velocity * effective_delta_time;
}

[numthreads(64,1,1)]
void calculate_force_arrows (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= node_count) return;
    
    float force_magnitude = length(nodes[id.x].force);
    float2 force_direction = force_magnitude > 0.0001f ? normalize(nodes[id.x].force) : float2(0, 0);
    
    // Scale arrow length based on force magnitude, but keep it visible
    float visible_scale = 0.5; // Adjust this to control the overall arrow size
    float min_length = 0.2;
    float max_length = 2.0;
    float arrow_length = clamp(log(1 + force_magnitude) * visible_scale, min_length, max_length);
    
    // Calculate arrow endpoint
    float2 arrow_end = nodes[id.x].position + force_direction * arrow_length;
    
    // Store arrow data
    force_arrows[id.x].start = nodes[id.x].position;
    force_arrows[id.x].end = arrow_end;
    force_arrows[id.x].strength = force_magnitude;
}
