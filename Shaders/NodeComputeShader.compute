#pragma kernel InitializeNodes
#pragma kernel UpdateNodes

struct node_data
{
    float3 position;
    float3 velocity;
    float4 color;
    float size;
    int nodeType;
    int customDataIndex;
};

RWStructuredBuffer<node_data> NodeBuffer;

// Shader parameters
int NodeCount;
float SpawnRadius;
float DeltaTime;
float SpawnProgress;

// Random function (same as before)
float Random(float2 st) 
{
    return frac(sin(dot(st.xy, float2(12.9898, 78.233))) * 43758.5453123);
}

[numthreads(64,1,1)]
void InitializeNodes(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)(NodeCount * SpawnProgress)) return;

    // Randomized spawning logic
    float angle = Random(id.xx) * 6.28318;
    float radius = sqrt(Random(id.xx + 1)) * SpawnRadius;

    NodeBuffer[id.x].position = float3(
        cos(angle) * radius, 
        Random(id.xx + 2) * SpawnRadius, 
        sin(angle) * radius
    );

    // Initial velocities and properties
    NodeBuffer[id.x].velocity = float3(
        (Random(id.xx + 3) - 0.5) * 2,
        (Random(id.xx + 4) - 0.5) * 2,
        (Random(id.xx + 5) - 0.5) * 2
    );

    NodeBuffer[id.x].color = float4(Random(id.xx + 6), Random(id.xx + 7), Random(id.xx + 8), 1);
    NodeBuffer[id.x].size = 0.1;
    NodeBuffer[id.x].nodeType = 0;
    NodeBuffer[id.x].customDataIndex = -1;
}

[numthreads(64,1,1)]
void UpdateNodes(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)NodeCount) return;

    // Simple physics simulation
    NodeBuffer[id.x].position += NodeBuffer[id.x].velocity * DeltaTime;

    // Basic boundary handling
    if (length(NodeBuffer[id.x].position) > SpawnRadius * 1.5)
    {
        NodeBuffer[id.x].velocity *= -0.9; // Bounce effect
    }
}